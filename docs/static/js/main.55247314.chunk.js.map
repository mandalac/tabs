{"version":3,"sources":["components/Tabs.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Tabs","tab","idx","handleClick","style","isSelected","backgroundColor","color","onClick","name","App","useState","IsSelected","message","tabs","setTabs","forEach","i","t","slice","concat","className","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wMAaeA,G,MAXF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,YAKxB,OACE,yBAAKC,MAAOH,EAAII,WALJ,CACZC,gBAAiB,SACjBC,MAAO,SAG8B,MACnC,wBAAIC,QAAS,kBAAML,EAAYD,KAAOD,EAAIQ,SCgDjCC,MArDf,WAAgB,IAAD,EACWC,mBAAS,CAC/B,CACEF,KAAM,UACNG,YAAY,EACZC,QAAS,uBAEX,CACEJ,KAAM,UACNJ,YAAY,EACZQ,QAAS,uBAEX,CACEJ,KAAM,YACNJ,YAAY,EACZQ,QAAS,2BAfA,mBACNC,EADM,KACAC,EADA,KAkBPZ,EAAc,SAACD,GACnBY,EAAKE,SAAQ,SAACf,EAAKgB,GACjB,GAAIf,IAAQe,EAAG,CACb,IAAIC,EAAIJ,EAAKG,GACbC,EAAEb,YAAa,EACfU,EAAQ,sBAAID,EAAKK,MAAM,EAAGF,IAAlB,CAAsBC,IAAGE,OAAON,EAAKK,MAAMF,EAAI,UAClD,GAAIf,IAAQe,EAAG,CACpB,IAAIC,EAAIJ,EAAKG,GACbC,EAAEb,YAAa,EACfU,EAAQ,sBAAID,EAAKK,MAAM,EAAGF,IAAlB,CAAsBC,IAAGE,OAAON,EAAKK,MAAMF,EAAI,UAK7D,OACE,yBAAKI,UAAU,OACb,6BACGP,EAAKQ,KAAI,SAACrB,EAAKgB,GACd,OAAO,kBAAC,EAAD,CAAMM,IAAKN,EAAGhB,IAAKA,EAAKE,YAAaA,EAAaD,IAAKe,QAGjEH,EAAKQ,KAAI,SAACrB,EAAKgB,GACd,OAAIhB,EAAII,WAEJ,yBAAKgB,UAAU,UAAUE,IAAKN,GAC5B,2BAAIhB,EAAIY,UAIP,UCvCKW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5B,a","file":"static/js/main.55247314.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Tabs = ({ tab, idx, handleClick }) => {\n  const style = {\n    backgroundColor: \"tomato\",\n    color: \"white\",\n  };\n  return (\n    <div style={tab.isSelected ? style : null}>\n      <h2 onClick={() => handleClick(idx)}>{tab.name}</h2>\n    </div>\n  );\n};\nexport default Tabs;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Tabs from \"./components/Tabs\";\n\nfunction App() {\n  const [tabs, setTabs] = useState([\n    {\n      name: \"Tab One\",\n      IsSelected: true,\n      message: \"Content for Tab One\",\n    },\n    {\n      name: \"Tab Two\",\n      isSelected: false,\n      message: \"Contend for Tab Two\",\n    },\n    {\n      name: \"Tab Three\",\n      isSelected: false,\n      message: \"Content for Tab Three\",\n    },\n  ]);\n  const handleClick = (idx) => {\n    tabs.forEach((tab, i) => {\n      if (idx !== i) {\n        let t = tabs[i];\n        t.isSelected = false;\n        setTabs([...tabs.slice(0, i), t].concat(tabs.slice(i + 1)));\n      } else if (idx === i) {\n        let t = tabs[i];\n        t.isSelected = true;\n        setTabs([...tabs.slice(0, i), t].concat(tabs.slice(i + 1)));\n      }\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        {tabs.map((tab, i) => {\n          return <Tabs key={i} tab={tab} handleClick={handleClick} idx={i} />;\n        })}\n      </div>\n      {tabs.map((tab, i) => {\n        if (tab.isSelected) {\n          return (\n            <div className=\"Content\" key={i}>\n              <p>{tab.message}</p>\n            </div>\n          );\n        }\n        return null;\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}